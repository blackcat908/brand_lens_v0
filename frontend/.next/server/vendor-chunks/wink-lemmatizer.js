/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/wink-lemmatizer";
exports.ids = ["vendor-chunks/wink-lemmatizer"];
exports.modules = {

/***/ "(ssr)/./node_modules/wink-lemmatizer/src/wink-lemmatizer.js":
/*!*************************************************************!*\
  !*** ./node_modules/wink-lemmatizer/src/wink-lemmatizer.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("//     wink-lemmatizer\n//     English lemmatizer\n//\n//     This file is part of “wink-lemmatizer”.\n//\n//     Copyright (c) GRAYPE Systems Private Limited\n//\n//     Permission is hereby granted, free of charge, to any person obtaining a\n//     copy of this software and associated documentation files (the \"Software\"),\n//     to deal in the Software without restriction, including without limitation\n//     the rights to use, copy, modify, merge, publish, distribute, sublicense,\n//     and/or sell copies of the Software, and to permit persons to whom the\n//     Software is furnished to do so, subject to the following conditions:\n//\n//     The above copyright notice and this permission notice shall be included\n//     in all copies or substantial portions of the Software.\n//\n//     THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n//     OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n//     THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n//     FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n//     DEALINGS IN THE SOFTWARE.\n\n// Load adjective/noun/verb exceptions.\nconst adjectiveExceptions = __webpack_require__( /*! wink-lexicon/src/wn-adjective-exceptions.js */ \"(ssr)/./node_modules/wink-lexicon/src/wn-adjective-exceptions.js\" );\nconst nounExceptions = __webpack_require__( /*! wink-lexicon/src/wn-noun-exceptions.js */ \"(ssr)/./node_modules/wink-lexicon/src/wn-noun-exceptions.js\" );\nconst verbExceptions = __webpack_require__( /*! wink-lexicon/src/wn-verb-exceptions.js */ \"(ssr)/./node_modules/wink-lexicon/src/wn-verb-exceptions.js\" );\n// Load all words (base form),\nconst words = __webpack_require__( /*! wink-lexicon/src/wn-words.js */ \"(ssr)/./node_modules/wink-lexicon/src/wn-words.js\" );\n// and their senses.\nconst senseMap = __webpack_require__( /*! wink-lexicon/src/wn-word-senses.js */ \"(ssr)/./node_modules/wink-lexicon/src/wn-word-senses.js\" );\n// The name space.\nconst lemmatize = Object.create( null );\n\n// The following code is an adaptation of [WordNet's Morphy](https://wordnet.princeton.edu/documentation/morphy7wn):\n\n// ### isAdjective\n/**\n * Checks the word in base form is an adjective or not using wordnet senses.\n *\n * @private\n * @method isAdjective\n * @param {string} word that needs to be tested for adjective.\n * @return {boolean} `true` if word is a valid adjective otherwise `false.`\n * @example\n * isAdjective( 'lat' );\n * // -> false\n*/\nvar isAdjective = function ( word ) {\n  const index = words[ word ];\n  if ( index === undefined ) return false;\n  const senses = senseMap[ index ];\n  for ( let k = 0; k < senses.length; k += 1 ) {\n    if ( senses[ k ] < 2 ) return true;\n  }\n  return false;\n}; // isAdjective()\n\n// ### lemmatizeAdjective\n/**\n *\n * Conjugates an `adjective` to it's base form (VB). It also has an alias\n * `lemmatizeAdjective` to maintain API level compatibility with previous version.\n *\n * @method adjective\n * @param {string} adjective that needs to be conjugated to base form.\n * @return {string} the base form of `adjective`.\n * @example\n * lemmatize.adjective( 'farthest' );\n * // -> far\n*/\nlemmatize.adjective = function ( adjective ) {\n  var lemma = adjectiveExceptions[ adjective ];\n  if ( lemma ) return lemma;\n  lemma = adjective.replace( /est$|er$/, '' );\n  if ( lemma.length === adjective.length ) return adjective;\n  if ( isAdjective( lemma ) ) return lemma;\n  lemma += 'e';\n  if ( isAdjective( lemma ) ) return lemma;\n  return adjective;\n}; // adjective()\n\n// ### isVerb\n/**\n * Checks the word in base form is a verb or not using wordnet senses.\n *\n * @private\n * @method isVerb\n * @param {string} word that needs to be tested for verb.\n * @return {boolean} `true` if word is a valid verb otherwise `false.`\n * @example\n * isVerb( 'eat' );\n * // -> true\n*/\nvar isVerb = function ( word ) {\n  const index = words[ word ];\n  if ( index === undefined ) return false;\n  const senses = senseMap[ index ];\n  for ( let k = 0; k < senses.length; k += 1 ) {\n    if ( senses[ k ] > 28 && senses[ k ] < 44  ) return true;\n  }\n  return false;\n}; // isVerb()\n\n// ### lemmatizeVerb\n/**\n *\n * Conjugates a `verb` to it's base form (VB). It also has an alias\n * `lemmatizeVerb` to maintain API level compatibility with previous version.\n *\n * @method verb\n * @param {string} verb that needs to be conjugated to base form.\n * @return {string} the base form of `verb`.\n * @example\n * lemmatize.verb( 'winning' );\n * // -> win\n*/\nlemmatize.verb = function ( verb ) {\n  var lemma = verbExceptions[ verb ];\n  if ( lemma ) return lemma;\n\n  lemma = verb.replace( /s$/, '' );\n  if ( lemma.length !== verb.length && isVerb( lemma ) ) return lemma;\n\n  lemma = verb.replace( /ies$/, 'y' );\n  if ( lemma.length !== verb.length && isVerb( lemma ) ) return lemma;\n\n  lemma = verb.replace( /es$|ed$|ing$/, '' );\n    if ( lemma.length !== verb.length ) {\n    if ( isVerb( lemma ) ) return lemma;\n    lemma += 'e';\n    if ( isVerb( lemma ) ) return lemma;\n  }\n  return verb;\n}; // verb()\n\nconst nounRegexes = [\n  { replace: /s$/, by: '' },\n  { replace: /ses$/, by: 's' },\n  { replace: /xes$/, by: 'x' },\n  { replace: /zes$/, by: 's' },\n  { replace: /ves$/, by: 'f' },\n  { replace: /ches$/, by: 'ch' },\n  { replace: /shes$/, by: 'sh' },\n  { replace: /men$/, by: 'man' },\n  { replace: /ies$/, by: 'y' }\n];\n\n// ### isNoun\n/**\n * Checks the word in base form is a noun or not using wordnet senses.\n *\n * @private\n * @method isNoun\n * @param {string} word that needs to be tested for noun.\n * @return {boolean} `true` if word is a valid noun otherwise `false.`\n * @example\n * isAdjective( 'house' );\n * // -> true\n*/\nvar isNoun = function ( word ) {\n  const index = words[ word ];\n  if ( index === undefined ) return false;\n  const senses = senseMap[ index ];\n  for ( let k = 0; k < senses.length; k += 1 ) {\n    if ( senses[ k ] > 2 && senses[ k ] < 29  ) return true;\n  }\n  return false;\n}; // isNoun()\n\n// ### lemmatizeNoun\n/**\n *\n * Converts the input `noun` to it's singular form. It also has an alias\n * `lemmatizeNoun` to maintain API level compatibility with previous version.\n *\n * @method noun\n * @param {string} noun that needs to be lemmatized.\n * @return {string} the singular of `noun`.\n * @example\n * lemmatize.noun( 'handkerchieves' );\n * // -> handkerchief\n*/\nlemmatize.noun = function ( noun ) {\n  var lemma = nounExceptions[ noun ];\n  if ( lemma ) return lemma;\n\n  lemma = noun;\n  for ( let k = 0; k < nounRegexes.length; k += 1 ) {\n    lemma = noun.replace( nounRegexes[ k ].replace, nounRegexes[ k ].by );\n\n    if ( lemma.length !== noun.length && isNoun( lemma ) ) return lemma;\n  }\n\n  return noun;\n}; // noun()\n\n// Create alias to maintain backwards compatibility.\nlemmatize.lemmatizeNoun = lemmatize.noun;\nlemmatize.lemmatizeVerb = lemmatize.verb;\nlemmatize.lemmatizeAdjective = lemmatize.adjective;\n\nmodule.exports = lemmatize;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/wink-lemmatizer/src/wink-lemmatizer.js\n");

/***/ })

};
;