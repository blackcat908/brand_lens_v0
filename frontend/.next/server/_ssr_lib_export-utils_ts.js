"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_ssr_lib_export-utils_ts";
exports.ids = ["_ssr_lib_export-utils_ts"];
exports.modules = {

/***/ "(ssr)/./lib/export-utils.ts":
/*!*****************************!*\
  !*** ./lib/export-utils.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   exportAIReportAsPDF: () => (/* binding */ exportAIReportAsPDF),\n/* harmony export */   exportAIReportAsWord: () => (/* binding */ exportAIReportAsWord),\n/* harmony export */   exportBrandReportAsPDF: () => (/* binding */ exportBrandReportAsPDF),\n/* harmony export */   exportReviewsAsCSV: () => (/* binding */ exportReviewsAsCSV),\n/* harmony export */   exportReviewsAsExcel: () => (/* binding */ exportReviewsAsExcel),\n/* harmony export */   exportReviewsAsPDF: () => (/* binding */ exportReviewsAsPDF)\n/* harmony export */ });\n/* harmony import */ var jspdf__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jspdf */ \"(ssr)/./node_modules/jspdf/dist/jspdf.es.min.js\");\n/* harmony import */ var jspdf_autotable__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jspdf-autotable */ \"(ssr)/./node_modules/jspdf-autotable/dist/jspdf.plugin.autotable.mjs\");\n/* harmony import */ var xlsx__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! xlsx */ \"(ssr)/./node_modules/xlsx/xlsx.mjs\");\n\n\n\n// Clean text for export (remove HTML tags)\nfunction cleanText(text) {\n    return text.replace(/<[^>]*>/g, \"\").trim();\n}\n// Export reviews table as CSV\nfunction exportReviewsAsCSV(reviews, brandName) {\n    const headers = [\n        \"Customer Name\",\n        \"Date\",\n        \"Rating\",\n        \"Review\"\n    ];\n    const csvContent = [\n        headers.join(\",\"),\n        ...reviews.map((review)=>[\n                `\"${review.customerName}\"`,\n                review.date,\n                review.rating.toString(),\n                `\"${cleanText(review.review).replace(/\"/g, '\"\"')}\"`\n            ].join(\",\"))\n    ].join(\"\\n\");\n    const blob = new Blob([\n        csvContent\n    ], {\n        type: \"text/csv;charset=utf-8;\"\n    });\n    const link = document.createElement(\"a\");\n    const url = URL.createObjectURL(blob);\n    link.setAttribute(\"href\", url);\n    link.setAttribute(\"download\", `${brandName}_reviews.csv`);\n    link.style.visibility = \"hidden\";\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n}\n// Export reviews table as Excel\nfunction exportReviewsAsExcel(reviews, brandName) {\n    const worksheet = xlsx__WEBPACK_IMPORTED_MODULE_2__.utils.json_to_sheet(reviews.map((review)=>({\n            \"Customer Name\": review.customerName,\n            Date: review.date,\n            Rating: review.rating,\n            Review: cleanText(review.review)\n        })));\n    const workbook = xlsx__WEBPACK_IMPORTED_MODULE_2__.utils.book_new();\n    xlsx__WEBPACK_IMPORTED_MODULE_2__.utils.book_append_sheet(workbook, worksheet, \"Reviews\");\n    xlsx__WEBPACK_IMPORTED_MODULE_2__.writeFile(workbook, `${brandName}_reviews.xlsx`);\n}\n// Export reviews table as PDF\nfunction exportReviewsAsPDF(reviews, brandName) {\n    const doc = new jspdf__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n    // Title\n    doc.setFontSize(16);\n    doc.text(`${brandName} - Review Details`, 14, 22);\n    // Subtitle\n    doc.setFontSize(10);\n    doc.text(`Generated on ${new Date().toLocaleDateString()}`, 14, 30);\n    // Table\n    const tableData = reviews.map((review)=>[\n            review.customerName,\n            review.date,\n            review.rating.toString(),\n            cleanText(review.review)\n        ]);\n    doc.autoTable({\n        head: [\n            [\n                \"Customer Name\",\n                \"Date\",\n                \"Rating\",\n                \"Review\"\n            ]\n        ],\n        body: tableData,\n        startY: 35,\n        styles: {\n            fontSize: 8\n        },\n        columnStyles: {\n            0: {\n                cellWidth: 25\n            },\n            1: {\n                cellWidth: 20\n            },\n            2: {\n                cellWidth: 15\n            },\n            3: {\n                cellWidth: \"auto\"\n            }\n        },\n        margin: {\n            top: 35\n        }\n    });\n    doc.save(`${brandName}_reviews.pdf`);\n}\n// Create a simple chart as base64 image for PDF\nfunction createChartImage(data, width = 200, height = 100) {\n    const canvas = document.createElement(\"canvas\");\n    canvas.width = width;\n    canvas.height = height;\n    const ctx = canvas.getContext(\"2d\");\n    // Clear canvas\n    ctx.fillStyle = \"#ffffff\";\n    ctx.fillRect(0, 0, width, height);\n    // Draw chart\n    const max = Math.max(...data);\n    const min = Math.min(...data);\n    const range = max - min || 1;\n    const barWidth = width / data.length;\n    ctx.fillStyle = \"#3b82f6\";\n    data.forEach((value, index)=>{\n        const barHeight = (value - min) / range * (height - 20);\n        const x = index * barWidth;\n        const y = height - barHeight - 10;\n        ctx.fillRect(x + 2, y, barWidth - 4, barHeight);\n    });\n    // Add labels\n    ctx.fillStyle = \"#374151\";\n    ctx.font = \"10px Arial\";\n    ctx.textAlign = \"center\";\n    data.forEach((value, index)=>{\n        const x = index * barWidth + barWidth / 2;\n        ctx.fillText(value.toFixed(2), x, height - 2);\n    });\n    return canvas.toDataURL(\"image/png\");\n}\n// Export comprehensive brand report as PDF\nfunction exportBrandReportAsPDF(brandData) {\n    const doc = new jspdf__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n    let yPosition = 20;\n    // Title\n    doc.setFontSize(20);\n    doc.text(`${brandData.name} - Sizing & Fit Analysis Report`, 14, yPosition);\n    yPosition += 15;\n    // Subtitle\n    doc.setFontSize(12);\n    doc.text(`Generated on ${new Date().toLocaleDateString()}`, 14, yPosition);\n    yPosition += 10;\n    doc.setFontSize(10);\n    doc.text(`Source: ${brandData.trustpilotUrl}`, 14, yPosition);\n    yPosition += 20;\n    // Metrics Section\n    doc.setFontSize(14);\n    doc.text(\"Key Metrics\", 14, yPosition);\n    yPosition += 10;\n    const metrics = [\n        [\n            \"Total Sizing & Fit Reviews\",\n            brandData.metrics.totalSizingFitReviews.toString()\n        ],\n        [\n            \"Average Rating\",\n            brandData.metrics.avgRating.toString()\n        ],\n        [\n            \"Positive Reviews\",\n            brandData.metrics.positiveCount.toString()\n        ],\n        [\n            \"Negative Reviews\",\n            brandData.metrics.negativeCount.toString()\n        ],\n        [\n            \"Sentiment Score\",\n            brandData.metrics.sentimentScore.toString()\n        ]\n    ];\n    doc.autoTable({\n        body: metrics,\n        startY: yPosition,\n        styles: {\n            fontSize: 10\n        },\n        columnStyles: {\n            0: {\n                cellWidth: 80,\n                fontStyle: \"bold\"\n            },\n            1: {\n                cellWidth: 40\n            }\n        },\n        theme: \"grid\"\n    });\n    yPosition = doc.lastAutoTable.finalY + 20;\n    // Monthly Trend Chart\n    doc.setFontSize(14);\n    doc.text(\"Monthly Sentiment Trend\", 14, yPosition);\n    yPosition += 10;\n    try {\n        const chartImage = createChartImage(brandData.metrics.monthlyTrend, 160, 80);\n        doc.addImage(chartImage, \"PNG\", 14, yPosition, 160, 80);\n        yPosition += 90;\n    } catch (error) {\n        doc.setFontSize(10);\n        doc.text(\"Chart could not be generated\", 14, yPosition);\n        yPosition += 20;\n    }\n    // Keywords Section\n    doc.setFontSize(14);\n    doc.text(\"Keywords Analyzed\", 14, yPosition);\n    yPosition += 10;\n    doc.setFontSize(10);\n    const keywordsText = brandData.keywords.join(\", \");\n    const splitKeywords = doc.splitTextToSize(keywordsText, 180);\n    doc.text(splitKeywords, 14, yPosition);\n    yPosition += splitKeywords.length * 5 + 15;\n    // Add new page for reviews if needed\n    if (yPosition > 250) {\n        doc.addPage();\n        yPosition = 20;\n    }\n    // Reviews Section\n    doc.setFontSize(14);\n    doc.text(\"Review Details\", 14, yPosition);\n    yPosition += 10;\n    const reviewTableData = brandData.reviews.map((review)=>[\n            review.customerName,\n            review.date,\n            review.rating.toString(),\n            cleanText(review.review)\n        ]);\n    doc.autoTable({\n        head: [\n            [\n                \"Customer\",\n                \"Date\",\n                \"Rating\",\n                \"Review\"\n            ]\n        ],\n        body: reviewTableData,\n        startY: yPosition,\n        styles: {\n            fontSize: 8\n        },\n        columnStyles: {\n            0: {\n                cellWidth: 25\n            },\n            1: {\n                cellWidth: 20\n            },\n            2: {\n                cellWidth: 15\n            },\n            3: {\n                cellWidth: \"auto\"\n            }\n        }\n    });\n    doc.save(`${brandData.name}_complete_report.pdf`);\n}\n// Export AI report as PDF\nfunction exportAIReportAsPDF(reportContent, brandName, prompt) {\n    const doc = new jspdf__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n    let yPosition = 20;\n    // Title\n    doc.setFontSize(18);\n    doc.text(`AI Report - ${brandName}`, 14, yPosition);\n    yPosition += 15;\n    // Subtitle\n    doc.setFontSize(10);\n    doc.text(`Generated on ${new Date().toLocaleDateString()}`, 14, yPosition);\n    yPosition += 10;\n    // Prompt section\n    doc.setFontSize(12);\n    doc.text(\"Analysis Prompt:\", 14, yPosition);\n    yPosition += 8;\n    doc.setFontSize(10);\n    const promptLines = doc.splitTextToSize(prompt, 180);\n    doc.text(promptLines, 14, yPosition);\n    yPosition += promptLines.length * 5 + 15;\n    // Report content\n    doc.setFontSize(12);\n    doc.text(\"Report Content:\", 14, yPosition);\n    yPosition += 8;\n    // Split report content into lines and add to PDF\n    const reportLines = reportContent.split('\\n');\n    doc.setFontSize(10);\n    for (const line of reportLines){\n        if (yPosition > 270) {\n            doc.addPage();\n            yPosition = 20;\n        }\n        if (line.startsWith('# ')) {\n            // Main heading\n            doc.setFontSize(14);\n            doc.text(line.substring(2), 14, yPosition);\n            yPosition += 10;\n        } else if (line.startsWith('## ')) {\n            // Subheading\n            doc.setFontSize(12);\n            doc.text(line.substring(3), 14, yPosition);\n            yPosition += 8;\n        } else if (line.startsWith('**') && line.endsWith('**')) {\n            // Bold text\n            doc.setFontSize(10);\n            doc.setFont(undefined, 'bold');\n            doc.text(line.substring(2, line.length - 2), 14, yPosition);\n            yPosition += 5;\n        } else if (line.trim() === '') {\n            // Empty line\n            yPosition += 5;\n        } else {\n            // Regular text\n            doc.setFontSize(10);\n            doc.setFont(undefined, 'normal');\n            const textLines = doc.splitTextToSize(line, 180);\n            doc.text(textLines, 14, yPosition);\n            yPosition += textLines.length * 5;\n        }\n    }\n    doc.save(`${brandName}_ai_report.pdf`);\n}\n// Export AI report as Word document (using HTML format)\nfunction exportAIReportAsWord(reportContent, brandName, prompt) {\n    const htmlContent = `\n    <!DOCTYPE html>\n    <html>\n    <head>\n      <meta charset=\"UTF-8\">\n      <title>AI Report - ${brandName}</title>\n      <style>\n        body { font-family: Arial, sans-serif; margin: 40px; line-height: 1.6; }\n        h1 { color: #333; border-bottom: 2px solid #333; padding-bottom: 10px; }\n        h2 { color: #555; margin-top: 30px; }\n        h3 { color: #666; }\n        .prompt { background-color: #f5f5f5; padding: 15px; border-left: 4px solid #007acc; margin: 20px 0; }\n        .timestamp { color: #888; font-size: 12px; }\n        ul, ol { margin-left: 20px; }\n        li { margin-bottom: 5px; }\n        strong { font-weight: bold; }\n        hr { border: none; border-top: 1px solid #ddd; margin: 30px 0; }\n      </style>\n    </head>\n    <body>\n      <h1>AI Report - ${brandName}</h1>\n      <p class=\"timestamp\">Generated on ${new Date().toLocaleDateString()}</p>\n      \n      <h2>Analysis Prompt</h2>\n      <div class=\"prompt\">\n        <strong>${prompt}</strong>\n      </div>\n      \n      <h2>Report Content</h2>\n      <div>${reportContent.replace(/\\n/g, '<br>').replace(/# /g, '<h1>').replace(/## /g, '<h2>').replace(/\\*\\*(.*?)\\*\\*/g, '<strong>$1</strong>')}</div>\n    </body>\n    </html>\n  `;\n    const blob = new Blob([\n        htmlContent\n    ], {\n        type: 'application/msword'\n    });\n    const link = document.createElement('a');\n    const url = URL.createObjectURL(blob);\n    link.setAttribute('href', url);\n    link.setAttribute('download', `${brandName}_ai_report.doc`);\n    link.style.visibility = 'hidden';\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./lib/export-utils.ts\n");

/***/ })

};
;